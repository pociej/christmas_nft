{"version":3,"file":"upstream.js","names":["_rxjs","require","_rxStorageHelper","_index","_checkpoint","_conflicts","_helper","_metaInstance","_index2","startReplicationUpstream","state","input","initialCheckpoint","upstream","checkpointDoc","getLastCheckpointDoc","setCheckpoint","replicationHandler","streamQueue","up","then","upstreamInitialSync","processTasks","timer","initialSyncStartTime","openTasks","persistenceQueue","PROMISE_RESOLVE_FALSE","nonPersistedFromMaster","docs","sub","forkInstance","changeStream","subscribe","eventBulk","context","downstreamBulkWriteFlag","stats","forkChangeStreamEmit","push","task","time","waitBeforePersist","firstValueFrom","events","canceled","pipe","filter","unsubscribe","getValue","checkpointQueue","lastCheckpoint","promises","Set","_loop","size","Promise","race","Array","from","upResult","getChangedDocumentsSince","pushBatchSize","documents","length","stackCheckpoints","checkpoint","promise","persistToMaster","ensureNotFalsy","add","catch","delete","resolvedPromises","all","hadConflicts","find","r","firstSyncDone","next","active","taskWithTime","shift","appendToArray","map","documentData","forEach","docData","docId","primaryPath","upDocsById","useCheckpoint","docIds","Object","keys","assumedMasterState","getAssumedMasterState","writeRowsToMaster","writeRowsToMasterIds","writeRowsToMeta","forkStateById","fullDocData","writeDocToDocState","hasAttachments","keepMeta","assumedMasterDoc","metaDocument","isResolvedConflict","_rev","conflictHandler","realMasterState","newDocumentState","isEqual","parseRevision","height","_meta","identifier","undefined","getMetaWriteRow","writeRowsArray","values","conflictIds","conflictsById","writeBatches","batchArray","writeBatch","row","fillWriteDataForAttachmentsChange","clone","masterWriteResult","masterWrite","conflictDoc","id","useWriteRowsToMeta","has","processed","metaInstance","bulkWrite","stripAttachmentsDataFromMetaWriteRows","hadConflictWrites","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","writeToMasterRow","resolveConflictError","resolved","resolvedConflicts","output","previous","document","resolvedDoc","persistToMasterConflictWrites","forkWriteResult","useMetaWrites","success","unhandledError","error"],"sources":["../../../src/replication-protocol/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\nimport { getChangedDocumentsSince, stackCheckpoints } from '../rx-storage-helper.ts';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowById,\n    ById,\n    EventBulk,\n    RxDocumentData,\n    RxReplicationWriteToMasterRow,\n    RxStorageChangeEvent,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types/index.d.ts';\nimport {\n    appendToArray,\n    batchArray,\n    clone,\n    ensureNotFalsy,\n    parseRevision,\n    PROMISE_RESOLVE_FALSE\n} from '../plugins/utils/index.ts';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint.ts';\nimport { resolveConflictError } from './conflicts.ts';\nimport {\n    stripAttachmentsDataFromMetaWriteRows,\n    writeDocToDocState\n} from './helper.ts';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance.ts';\nimport { fillWriteDataForAttachmentsChange } from '../plugins/attachments/index.ts';\n\n/**\n * Writes all document changes from the fork to the master.\n * The upstream runs on two modes:\n * - For initial replication, a checkpoint-iteration is used\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\n *   In contrast to the master, the fork can be assumed to never loose connection,\n *   so we do not have to prepare for missed out events.\n */\nexport async function startReplicationUpstream<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    if (\n        state.input.initialCheckpoint &&\n        state.input.initialCheckpoint.upstream\n    ) {\n        const checkpointDoc = await getLastCheckpointDoc(state, 'up');\n        if (!checkpointDoc) {\n            await setCheckpoint(\n                state,\n                'up',\n                state.input.initialCheckpoint.upstream\n            );\n        }\n    }\n\n    const replicationHandler = state.input.replicationHandler;\n    state.streamQueue.up = state.streamQueue.up.then(() => {\n        return upstreamInitialSync().then(() => {\n            processTasks();\n        });\n    });\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n    let initialSyncStartTime = -1;\n\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\n    type TaskWithTime = {\n        task: Task;\n        time: number;\n    };\n    const openTasks: TaskWithTime[] = [];\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<RxDocumentData<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    const sub = state.input.forkInstance.changeStream()\n        .subscribe(async (eventBulk) => {\n            // ignore writes that came from the downstream\n            if (eventBulk.context === await state.downstreamBulkWriteFlag) {\n                return;\n            }\n\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\n            openTasks.push({\n                task: eventBulk,\n                time: timer++\n            });\n            if (state.input.waitBeforePersist) {\n                return state.input.waitBeforePersist()\n                    .then(() => processTasks());\n            } else {\n                return processTasks();\n            }\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    async function upstreamInitialSync() {\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n        const promises: Set<Promise<any>> = new Set();\n\n        while (!state.events.canceled.getValue()) {\n            initialSyncStartTime = timer++;\n\n            /**\n             * Throttle the calls to\n             * forkInstance.getChangedDocumentsSince() so that\n             * if the pushing to the remote is slower compared to the\n             * pulling out of forkInstance, we do not block the UI too much\n             * and have a big memory spike with all forkInstance documents.\n             */\n            if (promises.size > 3) {\n                await Promise.race(Array.from(promises));\n            }\n\n            const upResult = await getChangedDocumentsSince(\n                state.input.forkInstance,\n                state.input.pushBatchSize,\n                lastCheckpoint\n            );\n            if (upResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\n\n            const promise = persistToMaster(\n                upResult.documents,\n                ensureNotFalsy(lastCheckpoint)\n            );\n            promises.add(promise);\n            promise.catch().then(() => promises.delete(promise));\n        }\n\n        /**\n         * If we had conflicts during the initial sync,\n         * it means that we likely have new writes to the fork\n         * and so we have to run the initial sync again to upstream these new writes.\n         */\n        const resolvedPromises = await Promise.all(promises);\n        const hadConflicts = resolvedPromises.find(r => !!r);\n        if (hadConflicts) {\n            await upstreamInitialSync();\n        } else if (\n            !state.firstSyncDone.up.getValue() &&\n            !state.events.canceled.getValue()\n        ) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n\n\n    /**\n     * Takes all open tasks an processes them at once.\n     */\n    function processTasks() {\n        if (\n            state.events.canceled.getValue() ||\n            openTasks.length === 0\n        ) {\n            state.events.active.up.next(false);\n            return;\n        }\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\n        state.events.active.up.next(true);\n        state.streamQueue.up = state.streamQueue.up.then(() => {\n            /**\n             * Merge/filter all open tasks\n             */\n            const docs: RxDocumentData<RxDocType>[] = [];\n            let checkpoint: CheckpointType = {} as any;\n            while (openTasks.length > 0) {\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\n                /**\n                 * If the task came in before the last time the initial sync fetching\n                 * has run, we can ignore the task because the initial sync already processed\n                 * these documents.\n                 */\n                if (taskWithTime.time < initialSyncStartTime) {\n                    continue;\n                }\n                appendToArray(\n                    docs,\n                    taskWithTime.task.events.map(r => {\n                        return r.documentData as any;\n                    })\n                );\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\n            }\n\n            const promise = docs.length === 0 ? PROMISE_RESOLVE_FALSE : persistToMaster(\n                docs,\n                checkpoint\n            );\n            return promise.then(() => {\n                if (openTasks.length === 0) {\n                    state.events.active.up.next(false);\n                } else {\n                    processTasks();\n                }\n            });\n        });\n    }\n\n    /**\n     * Returns true if had conflicts,\n     * false if not.\n     */\n    function persistToMaster(\n        docs: RxDocumentData<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<boolean> {\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistent list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n        persistenceQueue = persistenceQueue.then(async () => {\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(upDocsById);\n            if (docIds.length === 0) {\n                return false;\n            }\n\n            const assumedMasterState = await getAssumedMasterState(\n                state,\n                docIds\n            );\n\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            const writeRowsToMasterIds: string[] = [];\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\n\n            await Promise.all(\n                docIds.map(async (docId) => {\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\n                    forkStateById[docId] = fullDocData;\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData, state.hasAttachments, !!state.input.keepMeta);\n                    const assumedMasterDoc = assumedMasterState[docId];\n\n                    /**\n                     * If the master state is equal to the\n                     * fork state, we can assume that the document state is already\n                     * replicated.\n                     */\n                    if (\n                        (\n                            assumedMasterDoc &&\n                            // if the isResolvedConflict is correct, we do not have to compare the documents.\n                            assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\n                            &&\n                            (await state.input.conflictHandler({\n                                realMasterState: assumedMasterDoc.docData,\n                                newDocumentState: docData\n                            }, 'upstream-check-if-equal')).isEqual\n                        )\n                        ||\n                        /**\n                         * If the master works with _rev fields,\n                         * we use that to check if our current doc state\n                         * is different from the assumedMasterDoc.\n                         */\n                        (\n                            assumedMasterDoc &&\n                            (assumedMasterDoc.docData as any)._rev &&\n                            parseRevision(fullDocData._rev).height === fullDocData._meta[state.input.identifier]\n                        )\n                    ) {\n                        return;\n                    }\n\n                    writeRowsToMasterIds.push(docId);\n\n                    writeRowsToMaster[docId] = {\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\n                        newDocumentState: docData\n                    };\n                    writeRowsToMeta[docId] = await getMetaWriteRow(\n                        state,\n                        docData,\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                    );\n                })\n            );\n\n            if (writeRowsToMasterIds.length === 0) {\n                return false;\n            }\n\n\n            const writeRowsArray = Object.values(writeRowsToMaster);\n            const conflictIds: Set<string> = new Set();\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\n\n            /**\n             * To always respect the push.batchSize,\n             * we have to split the write rows into batches\n             * to ensure that replicationHandler.masterWrite() is never\n             * called with more documents than what the batchSize limits.\n             */\n            const writeBatches = batchArray(writeRowsArray, state.input.pushBatchSize);\n            await Promise.all(\n                writeBatches.map(async (writeBatch) => {\n\n                    // enhance docs with attachments\n                    if (state.hasAttachments) {\n                        await Promise.all(\n                            writeBatch.map(async (row) => {\n                                row.newDocumentState = await fillWriteDataForAttachmentsChange(\n                                    state.primaryPath,\n                                    state.input.forkInstance,\n                                    clone(row.newDocumentState),\n                                    row.assumedMasterState\n                                );\n                            })\n                        );\n                    }\n                    const masterWriteResult = await replicationHandler.masterWrite(writeBatch);\n                    masterWriteResult.forEach(conflictDoc => {\n                        const id = (conflictDoc as any)[state.primaryPath];\n                        conflictIds.add(id);\n                        conflictsById[id] = conflictDoc;\n                    });\n                })\n            );\n\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\n\n            writeRowsToMasterIds.forEach(docId => {\n                if (!conflictIds.has(docId)) {\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\n                }\n            });\n\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            if (useWriteRowsToMeta.length > 0) {\n                await state.input.metaInstance.bulkWrite(\n                    stripAttachmentsDataFromMetaWriteRows(state, useWriteRowsToMeta),\n                    'replication-up-write-meta'\n                );\n                // TODO what happens when we have conflicts here?\n            }\n\n            /**\n             * Resolve conflicts by writing a new document\n             * state to the fork instance and the 'real' master state\n             * to the meta instance.\n             * Non-409 errors will be detected by resolveConflictError()\n             */\n            let hadConflictWrites = false;\n            if (conflictIds.size > 0) {\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\n                await Promise.all(\n                    Object\n                        .entries(conflictsById)\n                        .map(([docId, realMasterState]) => {\n                            const writeToMasterRow = writeRowsToMaster[docId];\n                            const input = {\n                                newDocumentState: writeToMasterRow.newDocumentState,\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\n                                realMasterState\n                            };\n                            return resolveConflictError(\n                                state,\n                                input,\n                                forkStateById[docId]\n                            ).then(async (resolved) => {\n                                if (resolved) {\n                                    state.events.resolvedConflicts.next({\n                                        input,\n                                        output: resolved.output\n                                    });\n                                    conflictWriteFork.push({\n                                        previous: forkStateById[docId],\n                                        document: resolved.resolvedDoc\n                                    });\n                                    const assumedMasterDoc = assumedMasterState[docId];\n                                    conflictWriteMeta[docId] = await getMetaWriteRow(\n                                        state,\n                                        ensureNotFalsy(realMasterState),\n                                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\n                                        resolved.resolvedDoc._rev\n                                    );\n                                }\n                            });\n                        })\n                );\n\n                if (conflictWriteFork.length > 0) {\n                    hadConflictWrites = true;\n\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\n                        conflictWriteFork,\n                        'replication-up-write-conflict'\n                    );\n                    /**\n                     * Errors in the forkWriteResult must not be handled\n                     * because they have been caused by a write to the forkInstance\n                     * in between which will anyway trigger a new upstream cycle\n                     * that will then resolved the conflict again.\n                     */\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\n                    forkWriteResult.success\n                        .forEach(docData => {\n                            const docId = (docData as any)[state.primaryPath];\n                            useMetaWrites.push(\n                                conflictWriteMeta[docId]\n                            );\n                        });\n                    if (useMetaWrites.length > 0) {\n                        await state.input.metaInstance.bulkWrite(\n                            stripAttachmentsDataFromMetaWriteRows(state, useMetaWrites),\n                            'replication-up-write-conflict-meta'\n                        );\n                    }\n                    // TODO what to do with conflicts while writing to the metaInstance?\n                }\n            }\n\n            /**\n             * For better performance we do not await checkpoint writes,\n             * but to ensure order on parallel checkpoint writes,\n             * we have to use a queue.\n             */\n            setCheckpoint(\n                state,\n                'up',\n                useCheckpoint\n            );\n\n            return hadConflictWrites;\n        }).catch(unhandledError => {\n            state.events.error.next(unhandledError);\n            return false;\n        });\n\n        return persistenceQueue;\n    }\n}\n"],"mappings":"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"}