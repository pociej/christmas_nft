{"version":3,"file":"rx-storage-lokijs.js","names":["createLokiStorageInstance","RX_STORAGE_NAME_LOKIJS","ensureRxStorageInstanceParamsAreCorrect","RxStorageLoki","databaseSettings","name","leaderElectorByLokiDbName","Map","_proto","prototype","createStorageInstance","params","getRxStorageLoki","storage"],"sources":["../../../../src/plugins/storage-lokijs/rx-storage-lokijs.ts"],"sourcesContent":["import type {\n    LokiDatabaseSettings,\n    LokiSettings,\n    LokiStorageInternals,\n    RxStorage,\n    RxStorageInstanceCreationParams\n} from '../../types/index.d.ts';\nimport {\n    createLokiStorageInstance,\n    RxStorageInstanceLoki\n} from './rx-storage-instance-loki.ts';\nimport { RX_STORAGE_NAME_LOKIJS } from './lokijs-helper.ts';\nimport type { LeaderElector } from 'broadcast-channel';\n\nimport { ensureRxStorageInstanceParamsAreCorrect } from '../../rx-storage-helper.ts';\n\nexport class RxStorageLoki implements RxStorage<LokiStorageInternals, LokiSettings> {\n    public name = RX_STORAGE_NAME_LOKIJS;\n\n    /**\n     * Create one leader elector by db name.\n     * This is done inside of the storage, not globally\n     * to make it easier to test multi-tab behavior.\n     */\n    public leaderElectorByLokiDbName: Map<string, {\n        leaderElector: LeaderElector;\n        /**\n         * Count the instances that currently use the elector.\n         * If is goes to zero again, the elector can be closed.\n         */\n        instancesCount: number;\n    }> = new Map();\n\n    constructor(\n        public databaseSettings: LokiDatabaseSettings\n    ) { }\n\n    public createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>\n    ): Promise<RxStorageInstanceLoki<RxDocType>> {\n        ensureRxStorageInstanceParamsAreCorrect(params);\n        return createLokiStorageInstance(this, params, this.databaseSettings);\n    }\n}\n\nexport function getRxStorageLoki(\n    databaseSettings: LokiDatabaseSettings = {}\n): RxStorageLoki {\n    const storage = new RxStorageLoki(databaseSettings);\n    return storage;\n}\n"],"mappings":"AAOA,SACIA,yBAAyB,QAEtB,+BAA+B;AACtC,SAASC,sBAAsB,QAAQ,oBAAoB;AAG3D,SAASC,uCAAuC,QAAQ,4BAA4B;AAEpF,WAAaC,aAAa;EAGtB;AACJ;AACA;AACA;AACA;;EAUI,SAAAA,cACWC,gBAAsC,EAC/C;IAAA,KAlBKC,IAAI,GAAGJ,sBAAsB;IAAA,KAO7BK,yBAAyB,GAO3B,IAAIC,GAAG,CAAC,CAAC;IAAA,KAGHH,gBAAsC,GAAtCA,gBAAsC;EAC7C;EAAC,IAAAI,MAAA,GAAAL,aAAA,CAAAM,SAAA;EAAAD,MAAA,CAEEE,qBAAqB,GAA5B,SAAAA,sBACIC,MAAgE,EACvB;IACzCT,uCAAuC,CAACS,MAAM,CAAC;IAC/C,OAAOX,yBAAyB,CAAC,IAAI,EAAEW,MAAM,EAAE,IAAI,CAACP,gBAAgB,CAAC;EACzE,CAAC;EAAA,OAAAD,aAAA;AAAA;AAGL,OAAO,SAASS,gBAAgBA,CAC5BR,gBAAsC,GAAG,CAAC,CAAC,EAC9B;EACb,IAAMS,OAAO,GAAG,IAAIV,aAAa,CAACC,gBAAgB,CAAC;EACnD,OAAOS,OAAO;AAClB"}