import { NodeCreateOptions, NodeService } from "./node";
import { reactionEmoji } from "../constants";
import { Memo, nodeType } from "../types/node";
import { ListOptions } from "../types/query-options";
import { EncryptedKeys } from "@akord/crypto";
declare class MemoService extends NodeService<Memo> {
    static readonly reactionEmoji: typeof reactionEmoji;
    objectType: nodeType;
    NodeType: typeof Memo;
    defaultListOptions: ListOptions;
    /**
     * @param  {string} vaultId
     * @param  {string} message
     * @param  {NodeCreateOptions} [options] parent id, etc.
     * @returns Promise with new node id & corresponding transaction id
     */
    create(vaultId: string, message: string, options?: NodeCreateOptions): Promise<MemoCreateResult>;
    /**
     * @param  {string} memoId
     * @param  {reactionEmoji} reaction
     * @returns Promise with corresponding transaction id
     */
    addReaction(memoId: string, reaction: reactionEmoji): Promise<MemoUpdateResult>;
    /**
     * @param  {string} memoId
     * @param  {reactionEmoji} reaction
     * @returns Promise with corresponding transaction id
     */
    removeReaction(memoId: string, reaction: reactionEmoji): Promise<MemoUpdateResult>;
    protected processMemo(object: Memo, shouldDecrypt: boolean, keys?: EncryptedKeys[]): Promise<Memo>;
    private memoVersion;
    private memoReaction;
    private deleteReaction;
    private getReactionIndex;
}
declare type MemoCreateResult = {
    memoId: string;
    transactionId: string;
    object: Memo;
};
declare type MemoUpdateResult = {
    transactionId: string;
    object: Memo;
};
export { MemoService };
