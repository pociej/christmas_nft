import { NodeService } from "./node";
import { FileVersion, StorageType, nodeType } from "../types/node";
import { StackCreateOptions } from "./stack";
import { FileLike } from "../types/file";
import { NFT, NFTMetadata } from "../types/nft";
import { Tags } from "../types/contract";
declare class NFTService extends NodeService<NFT> {
    objectType: nodeType;
    NodeType: typeof NFT;
    /**
     * @param  {string} vaultId
     * @param  {FileLike} asset
     * @param  {NFTMetadata} metadata
     * @param  {StackCreateOptions} options
     * @returns Promise with corresponding transaction id
     */
    mint(vaultId: string, asset: FileLike, metadata: NFTMetadata, options?: StackCreateOptions): Promise<{
        nftId: string;
        transactionId: string;
        object: NFT;
    }>;
    /**
     * Get NFT asset
     * @param  {string} nftId
     * @returns Promise with NFT asset
     */
    getAsset(nftId: string): Promise<FileVersion & {
        data: ArrayBuffer;
    }>;
    /**
     * Get NFT asset uri
     * @param  {string} nftId
     * @param  {StorageType} [type] storage type, default to arweave
     * @returns Promise with NFT asset uri
     */
    getUri(nftId: string, type?: StorageType): Promise<string>;
}
export declare const nftMetadataToTags: (metadata: NFTMetadata) => Tags;
export { NFTService };
