"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FolderService = void 0;
const node_1 = require("./node");
const constants_1 = require("../constants");
const node_2 = require("../types/node");
class FolderService extends node_1.NodeService {
    constructor() {
        super(...arguments);
        this.objectType = node_2.nodeType.FOLDER;
        this.NodeType = node_2.Folder;
    }
    /**
     * @param  {string} vaultId
     * @param  {string} name folder name
     * @param  {NodeCreateOptions} [options] parent id, etc.
     * @returns Promise with new folder id & corresponding transaction id
     */
    create(vaultId, name, options = this.defaultCreateOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = new FolderService(this.wallet, this.api);
            yield service.setVaultContext(vaultId);
            service.setActionRef(constants_1.actionRefs.FOLDER_CREATE);
            service.setFunction(constants_1.functions.NODE_CREATE);
            service.setAkordTags((service.isPublic ? [name] : []).concat(options.tags));
            const state = {
                name: yield service.processWriteString(name),
                tags: options.tags || []
            };
            const { nodeId, transactionId, object } = yield service.nodeCreate(state, { parentId: options.parentId }, options.arweaveTags);
            return { folderId: nodeId, transactionId, object };
        });
    }
}
exports.FolderService = FolderService;
;
