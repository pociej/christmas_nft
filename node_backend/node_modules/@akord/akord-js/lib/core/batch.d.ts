import { Service } from "../core";
import { MembershipCreateOptions } from "./membership";
import { StackCreateOptions } from "./stack";
import { Node, NodeType, Stack } from "../types/node";
import { FileLike } from "../types/file";
import { BatchMembershipInviteResponse, BatchStackCreateResponse } from "../types/batch-response";
import { Membership, RoleType } from "../types/membership";
import { Hooks } from "./file";
import { ContractInput, Tags } from "../types/contract";
declare class BatchService extends Service {
    static BATCH_CHUNK_SIZE: number;
    static TRANSACTION_QUEUE_WAIT_TIME: number;
    /**
     * @param  {{id:string,type:NoteType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    revoke<T extends Node>(items: {
        id: string;
        type: NodeType;
    }[]): Promise<{
        transactionId: string;
        object: T;
    }[]>;
    /**
     * @param  {{id:string,type:NoteType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    restore<T extends Node>(items: {
        id: string;
        type: NodeType;
    }[]): Promise<{
        transactionId: string;
        object: T;
    }[]>;
    /**
     * @param  {{id:string,type:NodeType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    delete<T extends Node>(items: {
        id: string;
        type: NodeType;
    }[]): Promise<{
        transactionId: string;
        object: T;
    }[]>;
    /**
     * @param  {{id:string,type:NodeType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    move<T extends Node>(items: {
        id: string;
        type: NodeType;
    }[], parentId?: string): Promise<{
        transactionId: string;
        object: T;
    }[]>;
    /**
     * @param  {{id:string,role:RoleType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    membershipChangeRole(items: {
        id: string;
        role: RoleType;
    }[]): Promise<{
        transactionId: string;
        object: Membership;
    }[]>;
    /**
     * @param  {string} vaultId
     * @param  {{file:FileLike,name:string,options:StackCreateOptions}[]} items
     * @param  {BatchStackCreateOptions} [options]
     * @returns Promise with new stack ids & their corresponding transaction ids
     */
    stackCreate(vaultId: string, items: StackCreateItem[], options?: BatchStackCreateOptions): Promise<BatchStackCreateResponse>;
    /**
     * @param  {string} vaultId
     * @param  {{email:string,role:RoleType}[]} items
     * @param  {MembershipCreateOptions} [options] invitation email message, etc.
     * @returns Promise with new membership ids & their corresponding transaction ids
     */
    membershipInvite(vaultId: string, items: MembershipInviteItem[], options?: MembershipCreateOptions): Promise<BatchMembershipInviteResponse>;
    private batchUpdate;
    setGroupRef(items: any): void;
}
export declare type BatchStackCreateOptions = Hooks & {
    processingCountHook?: (count: number) => void;
    onStackCreated?: (item: Stack) => Promise<void>;
};
export declare type TransactionPayload = {
    vaultId: string;
    input: ContractInput;
    tags: Tags;
};
export declare type StackCreateTransaction = TransactionPayload & {
    item: StackCreateItem;
};
export declare type MembershipInviteTransaction = TransactionPayload & {
    item: MembershipInviteItem;
};
export declare type StackCreateItem = {
    file: FileLike;
    name: string;
    options?: StackCreateOptions;
};
export declare type MembershipInviteItem = {
    email: string;
    role: RoleType;
};
export { BatchService };
