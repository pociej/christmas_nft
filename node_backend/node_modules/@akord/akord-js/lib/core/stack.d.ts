import { NodeCreateOptions, NodeService } from "./node";
import { FileService, FileUploadOptions } from "./file";
import { FileSource } from "../types/file";
import { Stack, StorageType, nodeType } from "../types/node";
declare class StackService extends NodeService<Stack> {
    fileService: FileService;
    objectType: nodeType;
    NodeType: typeof Stack;
    /**
     * @param  {string} vaultId
     * @param  {FileSource} file file source: web File object, file path, buffer or stream
     * @param  {string} name stack name
     * @param  {StackCreateOptions} [options] parent id, progress hook, cancel hook, etc.
     * @returns Promise with new stack id & corresponding transaction id
     */
    create(vaultId: string, file: FileSource, name: string, options?: StackCreateOptions): Promise<StackCreateResult>;
    /**
     * @param  {string} vaultId
     * @param  {string} fileTxId arweave file transaction id reference
     * @param  {NodeCreateOptions} [options] parent id, etc.
     * @returns Promise with new stack id & corresponding transaction id
     */
    import(vaultId: string, fileTxId: string, options?: NodeCreateOptions): Promise<StackCreateResult>;
    /**
     * @param  {string} stackId
     * @param  {FileSource} file file source: web File object, file path, buffer or stream
     * @param  {FileUploadOptions} [options] progress hook, cancel hook, etc.
     * @returns Promise with corresponding transaction id
     */
    uploadRevision(stackId: string, file: FileSource, options?: FileUploadOptions): Promise<StackUpdateResult>;
    /**
     * Get stack version by index, return the latest version by default
     * @param  {string} stackId
     * @param  {number} [index] stack version index
     * @returns Promise with version name & data buffer
     */
    getVersion(stackId: string, index?: number): Promise<{
        name: string;
        data: ArrayBuffer;
    }>;
    /**
     * Get stack file uri by index, return the latest arweave uri by default
     * @param  {string} stackId
     * @param  {StorageType} [type] storage type, default to arweave
     * @param  {number} [index] file version index, default to latest
     * @returns Promise with stack file uri
     */
    getUri(stackId: string, type?: StorageType, index?: number): Promise<string>;
}
export declare type StackCreateOptions = NodeCreateOptions & FileUploadOptions;
declare type StackCreateResult = {
    stackId: string;
    transactionId: string;
    object: Stack;
};
declare type StackUpdateResult = {
    transactionId: string;
    object: Stack;
};
export { StackService };
