"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractService = void 0;
const core_1 = require("../core");
const incorrect_encryption_key_1 = require("../errors/incorrect-encryption-key");
class ContractService extends core_1.Service {
    /**
     * @param  id vault contract id
     * @returns Promise with the current contract state
     */
    getState(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = yield this.api.getContractState(id);
            if (contract.public) {
                return contract;
            }
            else {
                try {
                    yield contract.decrypt();
                }
                catch (error) {
                    throw new incorrect_encryption_key_1.IncorrectEncryptionKey(error);
                }
            }
            return contract;
        });
    }
    /**
     * @param  id vault contract id
     * @returns Promise with the list of all contract interactions
     */
    list(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.api.getTransactions(id);
        });
    }
    /**
     * @param tags array of name#value tags of warp contract to be created
     * @param state initial state of warp contract
     * @returns Promise contract Id
     */
    create(tags, state) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.initContractId(tags, state);
        });
    }
}
exports.ContractService = ContractService;
