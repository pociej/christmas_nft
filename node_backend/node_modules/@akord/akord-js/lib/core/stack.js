"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackService = void 0;
const node_1 = require("./node");
const constants_1 = require("../constants");
const file_1 = require("./file");
const node_2 = require("../types/node");
class StackService extends node_1.NodeService {
    constructor() {
        super(...arguments);
        this.fileService = new file_1.FileService(this.wallet, this.api);
        this.objectType = node_2.nodeType.STACK;
        this.NodeType = node_2.Stack;
    }
    /**
     * @param  {string} vaultId
     * @param  {FileSource} file file source: web File object, file path, buffer or stream
     * @param  {string} name stack name
     * @param  {StackCreateOptions} [options] parent id, progress hook, cancel hook, etc.
     * @returns Promise with new stack id & corresponding transaction id
     */
    create(vaultId, file, name, options = this.defaultCreateOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const createOptions = Object.assign(Object.assign({}, this.defaultCreateOptions), options);
            const service = new StackService(this.wallet, this.api);
            yield service.setVaultContext(vaultId);
            service.setActionRef(constants_1.actionRefs.STACK_CREATE);
            service.setFunction(constants_1.functions.NODE_CREATE);
            service.setAkordTags((service.isPublic ? [name] : []).concat(createOptions.tags));
            createOptions.cacheOnly = service.vault.cacheOnly;
            const fileService = new file_1.FileService(this.wallet, this.api, service);
            fileService.contentType = this.fileService.contentType;
            const fileLike = yield (0, file_1.createFileLike)(file, Object.assign({ name }, options));
            const fileUploadResult = yield fileService.create(fileLike, createOptions);
            const version = yield fileService.newVersion(fileLike, fileUploadResult);
            const state = {
                name: yield service.processWriteString(name ? name : fileLike.name),
                versions: [version],
                tags: createOptions.tags || []
            };
            const { nodeId, transactionId, object } = yield service.nodeCreate(state, { parentId: createOptions.parentId }, options.arweaveTags);
            return { stackId: nodeId, transactionId, object };
        });
    }
    /**
     * @param  {string} vaultId
     * @param  {string} fileTxId arweave file transaction id reference
     * @param  {NodeCreateOptions} [options] parent id, etc.
     * @returns Promise with new stack id & corresponding transaction id
     */
    import(vaultId, fileTxId, options = this.defaultCreateOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = new StackService(this.wallet, this.api);
            yield service.setVaultContext(vaultId);
            service.setActionRef(constants_1.actionRefs.STACK_CREATE);
            service.setFunction(constants_1.functions.NODE_CREATE);
            const fileService = new file_1.FileService(this.wallet, this.api, service);
            const { file, resourceHash, resourceUrl } = yield fileService.import(fileTxId);
            const version = new node_2.FileVersion({
                owner: yield this.wallet.getAddress(),
                createdAt: JSON.stringify(Date.now()),
                name: yield service.processWriteString(file.name),
                type: file.type,
                size: file.size,
                resourceUri: [`arweave:${fileTxId}`, `hash:${resourceHash}`, `s3:${resourceUrl}`],
            });
            const state = {
                name: yield service.processWriteString(file.name),
                versions: [version]
            };
            const { nodeId, transactionId, object } = yield service.nodeCreate(state, { parentId: options.parentId }, options.arweaveTags);
            return { stackId: nodeId, transactionId, object };
        });
    }
    /**
     * @param  {string} stackId
     * @param  {FileSource} file file source: web File object, file path, buffer or stream
     * @param  {FileUploadOptions} [options] progress hook, cancel hook, etc.
     * @returns Promise with corresponding transaction id
     */
    uploadRevision(stackId, file, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = new StackService(this.wallet, this.api);
            yield service.setVaultContextFromNodeId(stackId, this.objectType);
            service.setActionRef(constants_1.actionRefs.STACK_UPLOAD_REVISION);
            service.setFunction(constants_1.functions.NODE_UPDATE);
            options.cacheOnly = service.object.__cacheOnly__;
            const fileService = new file_1.FileService(this.wallet, this.api, service);
            fileService.contentType = this.fileService.contentType;
            const fileLike = yield (0, file_1.createFileLike)(file, options);
            const fileUploadResult = yield fileService.create(fileLike, options);
            const version = yield fileService.newVersion(fileLike, fileUploadResult);
            const state = {
                versions: [version]
            };
            return service.nodeUpdate(state);
        });
    }
    /**
     * Get stack version by index, return the latest version by default
     * @param  {string} stackId
     * @param  {number} [index] stack version index
     * @returns Promise with version name & data buffer
     */
    getVersion(stackId, index) {
        return __awaiter(this, void 0, void 0, function* () {
            const stack = new node_2.Stack(yield this.api.getNode(stackId, constants_1.objectType.STACK), null);
            const version = stack.getVersion(index);
            const service = new StackService(this.wallet, this.api);
            yield service.setVaultContext(stack.vaultId);
            const { fileData, metadata } = yield this.api.downloadFile(version.getUri(node_2.StorageType.S3), { public: service.isPublic });
            const data = yield service.processReadRaw(fileData, metadata);
            const name = yield service.processReadString(version.name);
            return { name, data };
        });
    }
    /**
     * Get stack file uri by index, return the latest arweave uri by default
     * @param  {string} stackId
     * @param  {StorageType} [type] storage type, default to arweave
     * @param  {number} [index] file version index, default to latest
     * @returns Promise with stack file uri
     */
    getUri(stackId, type = node_2.StorageType.ARWEAVE, index) {
        return __awaiter(this, void 0, void 0, function* () {
            const stack = new node_2.Stack(yield this.api.getNode(stackId, constants_1.objectType.STACK), null);
            return stack.getUri(type, index);
        });
    }
}
exports.StackService = StackService;
;
