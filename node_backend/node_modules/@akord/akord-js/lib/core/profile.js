"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileService = void 0;
const membership_1 = require("./membership");
const profile_details_1 = require("../types/profile-details");
const ts_cacheable_1 = require("@akord/ts-cacheable");
const cacheable_1 = require("../types/cacheable");
const service_1 = require("./service");
const constants_1 = require("../constants");
const common_1 = require("./common");
const crypto_1 = require("@akord/crypto");
const incorrect_encryption_key_1 = require("../errors/incorrect-encryption-key");
class ProfileService extends service_1.Service {
    constructor() {
        super(...arguments);
        this.objectType = constants_1.objectType.PROFILE;
    }
    /**
     * Fetch currently authenticated user's profile details
     * @returns Promise with profile details
     */
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.api.getUser();
            if (user) {
                const profileEncrypter = new crypto_1.Encrypter(this.wallet, null, null);
                profileEncrypter.decryptedKeys = [
                    {
                        publicKey: this.wallet.publicKeyRaw(),
                        privateKey: this.wallet.privateKeyRaw()
                    }
                ];
                let avatar = null;
                const resourceUri = getAvatarUri(new profile_details_1.ProfileDetails(user));
                if (resourceUri) {
                    const { fileData, metadata } = yield this.api.downloadFile(resourceUri);
                    const encryptedPayload = (0, common_1.getEncryptedPayload)(fileData, metadata);
                    try {
                        if (encryptedPayload) {
                            avatar = yield profileEncrypter.decryptRaw(encryptedPayload, false);
                        }
                        else {
                            const dataString = (0, crypto_1.arrayToString)(new Uint8Array(fileData));
                            avatar = yield profileEncrypter.decryptRaw(dataString, true);
                        }
                    }
                    catch (error) {
                        throw new incorrect_encryption_key_1.IncorrectEncryptionKey(error);
                    }
                }
                try {
                    const decryptedProfile = yield profileEncrypter.decryptObject(user, ['name']);
                    return Object.assign(Object.assign({}, decryptedProfile), { avatar });
                }
                catch (error) {
                    throw new incorrect_encryption_key_1.IncorrectEncryptionKey(error);
                }
            }
            return {};
        });
    }
    /**
     * Update user profile along with all active memberships
     * @param  {string} name new profile name
     * @param  {any} avatar new avatar buffer
     * @returns Promise with corresponding transaction ids
     */
    update(name, avatar) {
        return __awaiter(this, void 0, void 0, function* () {
            // update profile
            const user = yield this.api.getUser();
            const service = new membership_1.MembershipService(this.wallet, this.api);
            service.setRawDataEncryptionPublicKey(this.wallet.publicKeyRaw());
            service.setIsPublic(false);
            const profileDetails = yield service.processMemberDetails({ name, avatar }, true);
            const newProfileDetails = new profile_details_1.ProfileDetails(Object.assign(Object.assign({}, user), profileDetails));
            yield this.api.updateUser(newProfileDetails.name, newProfileDetails.avatarUri);
            // update user memberships
            let transactions = [];
            const memberships = yield this.listMemberships();
            const membershipPromises = memberships.map((membership) => __awaiter(this, void 0, void 0, function* () {
                const membershipService = new membership_1.MembershipService(this.wallet, this.api);
                const { transactionId } = yield membershipService.profileUpdate(membership.id, name, avatar);
                transactions.push({ id: membership.id, transactionId: transactionId });
                return membership;
            }));
            const { errors } = yield (0, common_1.handleListErrors)(memberships, membershipPromises);
            return { transactions, errors };
        });
    }
    listMemberships() {
        return __awaiter(this, void 0, void 0, function* () {
            const list = (listOptions) => __awaiter(this, void 0, void 0, function* () {
                return yield this.api.getMemberships(listOptions);
            });
            return yield (0, common_1.paginate)(list, {});
        });
    }
}
__decorate([
    (0, ts_cacheable_1.PCacheable)({
        storageStrategy: ts_cacheable_1.InMemoryStorageStrategy,
        cacheBusterObserver: cacheable_1.CacheBusters.profile,
        shouldCacheDecider: () => cacheable_1.CacheBusters.cache
    })
], ProfileService.prototype, "get", null);
__decorate([
    (0, ts_cacheable_1.PCacheBuster)({
        cacheBusterNotifier: cacheable_1.CacheBusters.profile
    })
], ProfileService.prototype, "update", null);
exports.ProfileService = ProfileService;
;
const getAvatarUri = (profileDetails) => {
    var _a;
    if (profileDetails.avatarUri && profileDetails.avatarUri.length) {
        const avatarUri = (_a = [...profileDetails.avatarUri]
            .reverse()
            .find(resourceUri => resourceUri.startsWith("s3:"))) === null || _a === void 0 ? void 0 : _a.replace("s3:", "");
        return avatarUri !== "null" && avatarUri;
    }
    else {
        return null;
    }
};
