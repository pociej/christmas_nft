"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDerivation = exports.setLicenseFee = exports.setDuration = exports.udlToTags = void 0;
const udl_1 = require("../types/udl");
const contract_1 = require("../types/contract");
const bad_request_1 = require("../errors/bad-request");
const udlToTags = (udl) => {
    const tags = [];
    tags.push(new contract_1.Tag(udl_1.tagNames.LICENSE, udl.license || udl_1.UDL_LICENSE_TX_ID));
    if (udl.licenseFee) {
        tags.push(new contract_1.Tag(udl_1.tagNames.LICENSE_FEE, (0, exports.setLicenseFee)(udl.licenseFee)));
    }
    if (udl.commercialUses) {
        for (let commercialUse of udl.commercialUses) {
            tags.push(new contract_1.Tag((0, exports.setDuration)(commercialUse, udl_1.tagNames.COMMERCIAL_USE), commercialUse.type));
        }
    }
    if (udl.derivations) {
        for (let derivation of udl.derivations) {
            tags.push(new contract_1.Tag((0, exports.setDuration)(derivation, udl_1.tagNames.DERIVATION), (0, exports.setDerivation)(derivation)));
        }
    }
    if (udl.expires) {
        tags.push(new contract_1.Tag(udl_1.tagNames.EXPIRES, udl.expires));
    }
    if (udl.currency) {
        tags.push(new contract_1.Tag(udl_1.tagNames.CURRENCY, udl.currency));
    }
    if (udl.paymentMode) {
        tags.push(new contract_1.Tag(udl_1.tagNames.PAYMENT_MODE, udl.paymentMode));
    }
    if (udl.paymentAddress) {
        tags.push(new contract_1.Tag(udl_1.tagNames.PAYMENT_ADDRESS, udl.paymentAddress));
    }
    return tags;
};
exports.udlToTags = udlToTags;
const setDuration = (udlField, tagName) => {
    if (udlField.duration) {
        return udlField.duration.type + "-" + udlField.duration.value + "-Years-" + tagName;
    }
    else {
        return tagName;
    }
};
exports.setDuration = setDuration;
const setLicenseFee = (licenseFee) => {
    return licenseFee.type + "-" + licenseFee.value;
};
exports.setLicenseFee = setLicenseFee;
const setDerivation = (derivation) => {
    let derivationValue = derivation.type;
    if (derivation.type === "Allowed-With-RevenueShare") {
        if (!derivation.value) {
            throw new bad_request_1.BadRequest("Incorrect UDL format: Derivation With Revenue Share must specify % value.");
        }
        derivationValue = derivationValue + "-" + derivation.value + "%";
    }
    return derivationValue;
};
exports.setDerivation = setDerivation;
