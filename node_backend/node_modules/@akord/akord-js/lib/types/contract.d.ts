import { Encryptable } from "@akord/crypto";
import { functions } from "../constants";
import { Membership } from "./membership";
import { Folder, Memo, Stack, NodeLike } from "./node";
export interface Contract {
    state: ContractState;
}
export declare class ContractState extends Encryptable {
    name: string;
    id: string;
    owner: string;
    status: string;
    createdAt: string;
    updatedAt: string;
    public: boolean;
    admin?: string;
    data: string[];
    memberships: Array<Membership>;
    folders: Array<Folder>;
    stacks: Array<Stack>;
    memos: Array<Memo>;
    nodes: Array<NodeLike>;
}
export declare class Tag {
    name: string;
    value: string;
    /**
     * @param name
     * @param value
     * @returns
     */
    constructor(name: string, value: any);
}
export declare type Tags = Tag[];
export interface ContractInput {
    function: functions;
    data?: DataInput;
    parentId?: string;
    address?: string;
    role?: string;
    members?: MembershipInput[];
}
export declare type MembershipInput = {
    id: string;
    address: string;
    role: string;
    data: string;
};
export declare type DataInput = {
    vault: string;
    membership: string;
} | {
    id: string;
    value: string;
}[] | string;
