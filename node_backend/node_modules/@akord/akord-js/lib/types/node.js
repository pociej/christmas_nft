"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageType = exports.NodeFactory = exports.MemoReaction = exports.MemoVersion = exports.FileVersion = exports.Version = exports.Memo = exports.Note = exports.Stack = exports.Folder = exports.Node = exports.nodeType = void 0;
const crypto_1 = require("@akord/crypto");
const not_found_1 = require("../errors/not-found");
var nodeType;
(function (nodeType) {
    nodeType["STACK"] = "Stack";
    nodeType["FOLDER"] = "Folder";
    nodeType["MEMO"] = "Memo";
    nodeType["NOTE"] = "Note";
    nodeType["NFT"] = "NFT";
})(nodeType = exports.nodeType || (exports.nodeType = {}));
class Node extends crypto_1.Encryptable {
    constructor(nodeLikeProto, keys, publicKey) {
        super(keys, publicKey);
        this.id = nodeLikeProto.id;
        this.createdAt = nodeLikeProto.createdAt;
        this.updatedAt = nodeLikeProto.updatedAt;
        this.status = nodeLikeProto.status;
        this.vaultId = nodeLikeProto.vaultId;
        this.owner = nodeLikeProto.owner;
        this.data = nodeLikeProto.data;
        this.parentId = nodeLikeProto.parentId;
        this.tags = nodeLikeProto.tags;
        this.__public__ = nodeLikeProto.__public__;
        this.__cacheOnly__ = nodeLikeProto.__cacheOnly__;
    }
    getVersion(index) {
        if (index) {
            if (this.versions && this.versions[index]) {
                return this.versions[index];
            }
            else {
                throw new not_found_1.NotFound("A version with given index: " + index + " does not exist for node: " + this.id);
            }
        }
        else {
            return this.versions && this.versions[this.versions.length - 1];
        }
    }
}
exports.Node = Node;
class Folder extends Node {
    constructor(nodeLike, keys) {
        super(nodeLike, keys);
        this.name = nodeLike.name;
        this.size = nodeLike.size;
    }
}
__decorate([
    (0, crypto_1.encrypted)()
], Folder.prototype, "name", void 0);
exports.Folder = Folder;
class Stack extends Node {
    constructor(nodeLike, keys) {
        super(nodeLike, keys);
        this.name = nodeLike.name;
        this.versions = (nodeLike.versions || []).map((version) => new FileVersion(version, keys));
    }
    getUri(type = StorageType.ARWEAVE, index) {
        const version = this.getVersion(index);
        return version.getUri(type);
    }
    getVersion(index) {
        return super.getVersion(index);
    }
}
__decorate([
    (0, crypto_1.encrypted)()
], Stack.prototype, "name", void 0);
exports.Stack = Stack;
class Note extends Node {
    constructor(nodeLike, keys) {
        super(nodeLike, keys);
        this.name = nodeLike.name;
        this.versions = (nodeLike.versions || []).map((version) => new FileVersion(version, keys));
    }
}
__decorate([
    (0, crypto_1.encrypted)()
], Note.prototype, "name", void 0);
exports.Note = Note;
class Memo extends Node {
    constructor(nodeLike, keys, publicKey) {
        super(nodeLike, keys);
        this.versions = (nodeLike.versions || []).map((version) => new MemoVersion(version, keys, publicKey));
    }
    getVersion(index) {
        return super.getVersion(index);
    }
}
exports.Memo = Memo;
class Version extends crypto_1.Encryptable {
    constructor(versionProto, keys, publicKey) {
        super(keys, publicKey);
        this.owner = versionProto.owner;
        this.createdAt = versionProto.createdAt;
    }
}
exports.Version = Version;
class FileVersion extends crypto_1.Encryptable {
    constructor(fileVersionProto, keys, publicKey) {
        super(keys, publicKey);
        this.owner = fileVersionProto.owner;
        this.createdAt = fileVersionProto.createdAt;
        this.type = fileVersionProto.type;
        this.resourceUri = fileVersionProto.resourceUri;
        this.size = fileVersionProto.size;
        this.numberOfChunks = fileVersionProto.numberOfChunks;
        this.chunkSize = fileVersionProto.chunkSize;
        this.name = fileVersionProto.name;
        this.status = fileVersionProto.status;
        this.udl = fileVersionProto.udl;
    }
    getUri(type) {
        var _a, _b;
        return (_b = (_a = this.resourceUri) === null || _a === void 0 ? void 0 : _a.find(uri => uri.startsWith(type))) === null || _b === void 0 ? void 0 : _b.replace(type, "");
    }
}
__decorate([
    (0, crypto_1.encrypted)()
], FileVersion.prototype, "name", void 0);
exports.FileVersion = FileVersion;
class MemoVersion extends crypto_1.Encryptable {
    constructor(memoVersionProto, keys, publicKey) {
        super(keys, publicKey);
        this.owner = memoVersionProto.owner;
        this.createdAt = memoVersionProto.createdAt;
        this.message = memoVersionProto.message;
        this.reactions = (memoVersionProto.reactions || []).map((reaction) => new MemoReaction(reaction, keys, publicKey));
        this.attachments = (memoVersionProto.attachments || []).map((attachment) => new FileVersion(attachment, keys));
    }
}
__decorate([
    (0, crypto_1.encrypted)()
], MemoVersion.prototype, "message", void 0);
exports.MemoVersion = MemoVersion;
class MemoReaction extends crypto_1.Encryptable {
    constructor(memoReactionProto, keys, publicKey) {
        super(keys, publicKey);
        this.owner = memoReactionProto.owner;
        this.createdAt = memoReactionProto.createdAt;
        this.reaction = memoReactionProto.reaction;
    }
}
__decorate([
    (0, crypto_1.encrypted)()
], MemoReaction.prototype, "reaction", void 0);
exports.MemoReaction = MemoReaction;
class NodeFactory {
    static instance(nodeLike, data, keys) {
        return new nodeLike(data, keys);
    }
}
exports.NodeFactory = NodeFactory;
var StorageType;
(function (StorageType) {
    StorageType["S3"] = "s3:";
    StorageType["ARWEAVE"] = "arweave:";
})(StorageType = exports.StorageType || (exports.StorageType = {}));
