"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeJs = void 0;
const buffer_1 = require("buffer");
const mime = __importStar(require("mime-types"));
const not_found_1 = require("../errors/not-found");
const bad_request_1 = require("../errors/bad-request");
var NodeJs;
(function (NodeJs) {
    class File extends buffer_1.Blob {
        constructor(sources, name, mimeType, lastModified) {
            super(sources, { type: mimeType || 'text/plain' });
            if (!name) {
                throw new bad_request_1.BadRequest("File name is required, please provide it in the file options.");
            }
            if (!mimeType) {
                console.warn("Missing file mime type. If this is unintentional, please provide it in the file options.");
            }
            this.name = name;
            this.lastModified = lastModified;
        }
        static fromReadable(stream, name, mimeType, lastModified) {
            var stream_1, stream_1_1;
            var e_1, _a;
            return __awaiter(this, void 0, void 0, function* () {
                const chunks = [];
                try {
                    for (stream_1 = __asyncValues(stream); stream_1_1 = yield stream_1.next(), !stream_1_1.done;) {
                        const chunk = stream_1_1.value;
                        chunks.push(chunk);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (stream_1_1 && !stream_1_1.done && (_a = stream_1.return)) yield _a.call(stream_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return new File(chunks, name, mimeType, lastModified);
            });
        }
        static fromPath(filePath) {
            return __awaiter(this, void 0, void 0, function* () {
                if (typeof window === 'undefined') {
                    const fs = (yield Promise.resolve().then(() => __importStar(require("fs")))).default;
                    const path = (yield Promise.resolve().then(() => __importStar(require("path")))).default;
                    if (!fs.existsSync(filePath)) {
                        throw new not_found_1.NotFound("Could not find a file in your filesystem: " + filePath);
                    }
                    const stats = fs.statSync(filePath);
                    const name = path.basename(filePath);
                    const file = new File([fs.readFileSync(filePath)], name, mime.lookup(name) || '', stats.ctime.getTime());
                    return file;
                }
                else {
                    throw new bad_request_1.BadRequest("Method not valid for browsers.");
                }
            });
        }
    }
    NodeJs.File = File;
})(NodeJs = exports.NodeJs || (exports.NodeJs = {}));
