import { Encryptable, EncryptedKeys } from "@akord/crypto";
import { status } from "../constants";
import { UDL } from "./udl";
import { NFT } from "./nft";
export declare enum nodeType {
    STACK = "Stack",
    FOLDER = "Folder",
    MEMO = "Memo",
    NOTE = "Note",
    NFT = "NFT"
}
export declare type NodeType = "Stack" | "Folder" | "Memo" | "Note" | "NFT";
export declare abstract class Node extends Encryptable {
    id: string;
    owner: string;
    createdAt: string;
    updatedAt: string;
    status: status;
    vaultId: string;
    parentId?: string;
    data?: Array<string>;
    tags?: string[];
    __public__?: boolean;
    __cacheOnly__?: boolean;
    constructor(nodeLikeProto: any, keys?: Array<EncryptedKeys>, publicKey?: string);
    getVersion(index?: number): Version;
}
export declare class Folder extends Node {
    name: string;
    size: number;
    constructor(nodeLike: any, keys: Array<EncryptedKeys>);
}
export declare class Stack extends Node {
    name: string;
    versions: Array<FileVersion>;
    constructor(nodeLike: any, keys: Array<EncryptedKeys>);
    getUri(type?: StorageType, index?: number): string;
    getVersion(index?: number): FileVersion;
}
export declare class Note extends Node {
    name: string;
    versions: Array<FileVersion>;
    constructor(nodeLike: any, keys: Array<EncryptedKeys>);
}
export declare class Memo extends Node {
    versions: Array<MemoVersion>;
    constructor(nodeLike: any, keys: Array<EncryptedKeys>, publicKey?: string);
    getVersion(index?: number): MemoVersion;
}
export declare abstract class Version extends Encryptable {
    owner: string;
    createdAt: string;
    constructor(versionProto: any, keys?: Array<EncryptedKeys>, publicKey?: string);
}
export declare class FileVersion extends Encryptable implements Version {
    name: string;
    type: string;
    resourceUri: string[];
    size: number;
    numberOfChunks?: number;
    udl?: UDL;
    chunkSize?: number;
    owner: string;
    createdAt: string;
    status: string;
    constructor(fileVersionProto: any, keys?: Array<EncryptedKeys>, publicKey?: string);
    getUri(type: StorageType): string;
}
export declare class MemoVersion extends Encryptable implements Version {
    message: string;
    reactions?: Array<MemoReaction>;
    attachments?: Array<FileVersion>;
    owner: string;
    createdAt: string;
    constructor(memoVersionProto: any, keys?: Array<EncryptedKeys>, publicKey?: string);
}
export declare class MemoReaction extends Encryptable {
    reaction: string;
    owner: string;
    createdAt: string;
    constructor(memoReactionProto: any, keys?: Array<EncryptedKeys>, publicKey?: string);
}
export declare type NodeLike = Folder | Stack | Note | Memo | NFT;
export declare class NodeFactory {
    static instance<NodeLike, K extends Node>(nodeLike: {
        new (raw: K, keys: Array<EncryptedKeys>): NodeLike;
    }, data: K, keys: Array<EncryptedKeys>): any;
}
export declare enum StorageType {
    S3 = "s3:",
    ARWEAVE = "arweave:"
}
