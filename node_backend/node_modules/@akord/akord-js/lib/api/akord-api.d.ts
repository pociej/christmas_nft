import { ClientConfig } from "../config";
import { Api } from "./api";
import { ApiConfig } from "./config";
import { Membership, MembershipKeys, RoleType } from "../types/membership";
import { ContractInput, ContractState, Tags } from "../types/contract";
import { NodeType } from "../types/node";
import { Vault } from "../types/vault";
import { Transaction } from "../types/transaction";
import { Paginated } from "../types/paginated";
import { ListOptions, VaultApiGetOptions } from "../types/query-options";
import { User, UserPublicInfo } from "../types/user";
import { FileDownloadOptions, FileUploadOptions } from "../core/file";
import { EncryptionMetadata } from "../core";
export declare const defaultFileUploadOptions: {
    cacheOnly: boolean;
    public: boolean;
};
export default class AkordApi extends Api {
    config: ApiConfig;
    constructor(config: ClientConfig);
    uploadData(items: {
        data: any;
        tags: Tags;
    }[], options?: FileUploadOptions): Promise<Array<string>>;
    postContractTransaction<T>(vaultId: string, input: ContractInput, tags: Tags, metadata?: any): Promise<{
        id: string;
        object: T;
    }>;
    getMembers(vaultId: string): Promise<Array<Membership>>;
    initContractId(tags: Tags, state?: any): Promise<string>;
    uploadFile(file: ArrayBuffer, tags: Tags, options?: FileUploadOptions): Promise<{
        resourceUrl: string;
        resourceTx: string;
    }>;
    downloadFile(id: string, options?: FileDownloadOptions): Promise<{
        fileData: ArrayBuffer;
        metadata: EncryptionMetadata;
    }>;
    existsUser(email: string): Promise<Boolean>;
    getUserPublicData(email: string): Promise<UserPublicInfo>;
    getUser(): Promise<User>;
    updateUser(name: string, avatarUri: string[]): Promise<void>;
    deleteVault(vaultId: string): Promise<void>;
    inviteNewUser(vaultId: string, email: string, role: RoleType, message?: string): Promise<{
        id: string;
    }>;
    revokeInvite(vaultId: string, membershipId: string): Promise<{
        id: string;
    }>;
    inviteResend(vaultId: string, membershipId: string): Promise<{
        id: string;
    }>;
    getNode<T>(id: string, type: NodeType): Promise<T>;
    getMembership(id: string): Promise<Membership>;
    getVault(id: string, options?: VaultApiGetOptions): Promise<Vault>;
    getMembershipKeys(vaultId: string): Promise<MembershipKeys>;
    getNodeState(stateId: string): Promise<any>;
    getNotifications(): Promise<Paginated<any>>;
    readNotifications(options: {
        id?: string;
        vaultId?: string;
        readOnly?: Boolean;
        shouldDelete?: Boolean;
    }): Promise<void>;
    getContractState(objectId: string): Promise<ContractState>;
    getMemberships(options?: ListOptions): Promise<Paginated<Membership>>;
    getVaults(options?: ListOptions): Promise<Paginated<Vault>>;
    getNodesByVaultId<T>(vaultId: string, type: NodeType, options?: ListOptions): Promise<Paginated<T>>;
    getMembershipsByVaultId(vaultId: string, options?: ListOptions): Promise<Paginated<Membership>>;
    getTransactions(vaultId: string): Promise<Array<Transaction>>;
}
export { AkordApi };
