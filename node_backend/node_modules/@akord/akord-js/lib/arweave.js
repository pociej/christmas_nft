"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTxMetadata = exports.getTxData = void 0;
const axios_1 = __importDefault(require("axios"));
const error_factory_1 = require("./errors/error-factory");
const not_found_1 = require("./errors/not-found");
const ARWEAVE_URL = "https://arweave.net/";
const DEFAULT_RESPONSE_TYPE = "arraybuffer";
const getTxData = (id, responseType = DEFAULT_RESPONSE_TYPE) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const config = {
        method: "get",
        url: ARWEAVE_URL + id,
        responseType: responseType
    };
    try {
        const response = yield (0, axios_1.default)(config);
        if (response.status == 200 || response.status == 202) {
            return responseType === DEFAULT_RESPONSE_TYPE && typeof window === 'undefined'
                ? bufferToArrayBuffer(response.data)
                : response.data;
        }
        else {
            (0, error_factory_1.throwError)(response === null || response === void 0 ? void 0 : response.status, (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.msg);
        }
    }
    catch (error) {
        (0, error_factory_1.throwError)((_b = error.response) === null || _b === void 0 ? void 0 : _b.status, (_d = (_c = error.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.msg, error);
    }
});
exports.getTxData = getTxData;
const getTxMetadata = (id) => __awaiter(void 0, void 0, void 0, function* () {
    var _e, _f, _g;
    const result = yield graphql(getTransaction, { id });
    const txMetadata = (_g = (_f = (_e = result === null || result === void 0 ? void 0 : result.data) === null || _e === void 0 ? void 0 : _e.transactions) === null || _f === void 0 ? void 0 : _f.edges[0]) === null || _g === void 0 ? void 0 : _g.node;
    if (!txMetadata) {
        throw new not_found_1.NotFound("Cannot fetch arweave transaction metadata: " + id);
    }
    return txMetadata;
});
exports.getTxMetadata = getTxMetadata;
const getTransaction = /* GraphQL */ `
query transactionsById($id: ID!) {
  transactions(ids:[$id]) {
    edges {
      node {
        id
        owner {
          address
        }
        data {
          type
          size
        }
        tags {
          name
          value
        }
        block {
          timestamp
        }
      }
    }
  }
}
`;
const graphql = (query, variables) => __awaiter(void 0, void 0, void 0, function* () {
    var _h, _j, _k;
    try {
        const config = {
            url: ARWEAVE_URL + "graphql",
            method: 'post',
            headers: {
                'content-type': 'application/json'
            },
            data: JSON.stringify({ query, variables }),
        };
        const response = yield (0, axios_1.default)(config);
        return response.data;
    }
    catch (error) {
        (0, error_factory_1.throwError)((_h = error.response) === null || _h === void 0 ? void 0 : _h.status, (_k = (_j = error.response) === null || _j === void 0 ? void 0 : _j.data) === null || _k === void 0 ? void 0 : _k.msg, error);
    }
});
const bufferToArrayBuffer = (buffer) => {
    const arrayBuffer = new ArrayBuffer(buffer.length);
    var view = new Uint8Array(arrayBuffer);
    for (var i = 0; i < buffer.length; ++i) {
        view[i] = buffer[i];
    }
    return arrayBuffer;
};
