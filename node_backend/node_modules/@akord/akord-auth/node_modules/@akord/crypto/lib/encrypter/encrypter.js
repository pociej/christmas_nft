"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encrypter = void 0;
const encoding_1 = require("../encoding");
const crypto = __importStar(require("../functions"));
class Encrypter {
    constructor(wallet, keys, publicKey) {
        this.publicKey = publicKey;
        this.wallet = wallet;
        this.keys = keys;
        this.decryptedKeys = [];
    }
    setPublicKey(publicKey) {
        this.publicKey = (0, encoding_1.base64ToArray)(publicKey);
    }
    setRawPublicKey(publicKey) {
        this.publicKey = publicKey;
    }
    decryptObject(encryptedObject, fieldsToDecrypt) {
        return __awaiter(this, void 0, void 0, function* () {
            let decryptedObject = encryptedObject;
            const promises = fieldsToDecrypt.map((fieldName) => __awaiter(this, void 0, void 0, function* () {
                if (decryptedObject[fieldName] &&
                    decryptedObject[fieldName] !== null &&
                    decryptedObject[fieldName] !== '') {
                    const decryptedValue = yield this.decryptRaw(decryptedObject[fieldName]);
                    decryptedObject[fieldName] = (0, encoding_1.arrayToString)(decryptedValue);
                }
            }));
            return Promise.all(promises).then(() => decryptedObject);
        });
    }
    encryptString(_string) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.encryptRaw((0, encoding_1.stringToArray)(_string));
        });
    }
    decryptString(_encryptedString) {
        return __awaiter(this, void 0, void 0, function* () {
            const decryptedDataArray = yield this.decryptRaw(_encryptedString);
            return (0, encoding_1.arrayToString)(decryptedDataArray);
        });
    }
    decryptKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.keys && (!this.decryptedKeys || this.decryptedKeys.length < this.keys.length)) {
                try {
                    const promises = this.keys.map((key) => __awaiter(this, void 0, void 0, function* () {
                        const privateKey = yield this.wallet.decrypt(key.encPrivateKey);
                        const publicKey = yield this.wallet.decrypt(key.encPublicKey);
                        this.decryptedKeys.push({
                            publicKey: publicKey,
                            privateKey: privateKey
                        });
                    }));
                    yield Promise.all(promises);
                }
                catch (error) {
                    throw new Error(error);
                }
            }
        });
    }
    setKeys(keys) {
        if (!this.keys || this.keys.length === 0
            || JSON.stringify(this.keys) !== JSON.stringify(keys)) {
            this.keys = keys;
            this.decryptedKeys = [];
        }
    }
    encryptMemberKeys(memberKeys) {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = [];
            yield this.decryptKeys();
            for (let x = memberKeys.length; x < this.decryptedKeys.length; x++) {
                // encrypt private key with member's wallet public key
                const encPrivateKey = yield this.wallet.encryptToPublicKey(this.decryptedKeys[x].privateKey, this.publicKey);
                const encPublicKey = yield this.wallet.encryptToPublicKey(this.decryptedKeys[x].publicKey, this.publicKey);
                keys.push({
                    publicKey: this.decryptedKeys[x].publicKey,
                    encPublicKey: encPublicKey,
                    encPrivateKey: encPrivateKey
                });
            }
            return keys;
        });
    }
    encryptMemberKey(keyPair) {
        return __awaiter(this, void 0, void 0, function* () {
            // encrypt private key for member's wallet address
            const encPrivateKey = yield this.wallet.encryptToPublicKey(keyPair.privateKey, this.publicKey);
            const encPublicKey = yield this.wallet.encryptToPublicKey(keyPair.publicKey, this.publicKey);
            return { encPublicKey, encPrivateKey };
        });
    }
    decryptRaw(encryptedPayload, decode = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (encryptedPayload === null)
                return null;
            try {
                yield this.decryptKeys();
                let decryptedData;
                for (let keyPair of this.decryptedKeys) {
                    try {
                        decryptedData = yield crypto.decryptHybridRaw(encryptedPayload, keyPair.privateKey, decode);
                    }
                    catch (error) { }
                }
                if (!decryptedData) {
                    console.log('The user does not have a correct key to decrypt the data.');
                }
                return decryptedData;
            }
            catch (error) {
                console.log(error);
                // throw new Error(error)
            }
        });
    }
    encryptRaw(plaintext, encode = true, encryptedKey) {
        return __awaiter(this, void 0, void 0, function* () {
            let accessKey;
            if (encryptedKey) {
                yield this.decryptKeys();
                for (let keyPair of this.decryptedKeys) {
                    try {
                        accessKey = yield crypto.decryptKeyWithPrivateKey(encryptedKey, keyPair.privateKey);
                    }
                    catch (error) { }
                }
                if (!accessKey) {
                    throw new Error('The user does not have a correct key to decrypt the data.');
                }
            }
            return crypto.encryptHybridRaw(plaintext, this.publicKey, encode, accessKey);
        });
    }
}
exports.Encrypter = Encrypter;
//# sourceMappingURL=encrypter.js.map