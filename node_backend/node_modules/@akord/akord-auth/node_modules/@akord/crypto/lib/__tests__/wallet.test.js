"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
describe("Wallet tests", () => {
    const password = "password";
    const newPassword = "newPassword";
    let backupPhrase, encBackupPhrase;
    describe('Akord wallet tests', () => {
        it('create the wallet', () => __awaiter(void 0, void 0, void 0, function* () {
            const wallet = yield __1.AkordWallet.create(password);
            backupPhrase = wallet.backupPhrase;
            encBackupPhrase = wallet.encBackupPhrase;
            expect(__1.AkordWallet.isValidMnemonic(wallet.backupPhrase)).toEqual(true);
        }));
        it('import the wallet from the encrypted backup phrase', () => __awaiter(void 0, void 0, void 0, function* () {
            const wallet = yield __1.AkordWallet.importFromEncBackupPhrase(password, encBackupPhrase);
            expect(wallet.backupPhrase).toEqual(backupPhrase);
        }));
        it('import the wallet from the keystore', () => __awaiter(void 0, void 0, void 0, function* () {
            const wallet = yield __1.AkordWallet.importFromKeystore(encBackupPhrase);
            expect(wallet.backupPhrase).toEqual(backupPhrase);
        }));
        it('recover the wallet from the backup phrase', () => __awaiter(void 0, void 0, void 0, function* () {
            const wallet = yield __1.AkordWallet.recover(newPassword, backupPhrase);
            expect(wallet.backupPhrase).toEqual(backupPhrase);
        }));
        it('change password for the wallet', () => __awaiter(void 0, void 0, void 0, function* () {
            const wallet = yield __1.AkordWallet.changePassword(password, newPassword, encBackupPhrase);
            expect(wallet.backupPhrase).toEqual(backupPhrase);
        }));
    });
});
//# sourceMappingURL=wallet.test.js.map