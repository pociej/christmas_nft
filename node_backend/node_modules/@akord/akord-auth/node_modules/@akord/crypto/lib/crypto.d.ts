import { Encrypter } from "./encrypter";
import { EncryptedKeys } from "./encrypter/types";
import { EncryptedPayload } from "./types";
import { Wallet } from "./wallet";
export interface CryptoOptions {
    wallet?: Wallet;
    backupPhrase?: string;
    encBackupPhrase?: string;
    password?: string;
    keys?: [EncryptedKeys];
}
export declare class CryptoClass {
    private _config;
    private _wallet;
    private _encrypter;
    constructor(config: CryptoOptions);
    configure(config: CryptoOptions): Promise<CryptoOptions>;
    wallet(): Wallet;
    encrypter(): Encrypter;
    encrypt(input: string): Promise<string | EncryptedPayload>;
    decryptRaw(input: string | EncryptedPayload): Promise<ArrayBuffer>;
    decrypt(input: string): Promise<string>;
    private configureEncrypter;
    private configureWallet;
}
export declare const Crypto: CryptoClass;
