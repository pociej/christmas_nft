"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const folder_1 = require("./data/folder/folder");
const data_1 = require("./data/folder/data");
const user_1 = require("./data/user");
describe("Asymetric de/-encryption with backup phrase", () => {
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield __1.Crypto.configure({
            backupPhrase: user_1.backupPhrase
        });
    }));
    it("should decrypt folder class properties", () => __awaiter(void 0, void 0, void 0, function* () {
        const folder = new folder_1.Folder(data_1.encryptedName, data_1.keys);
        yield folder.decrypt();
        expect(folder.name).toEqual(data_1.name);
    }));
    it("should encrypt & decrypt folder class properties", () => __awaiter(void 0, void 0, void 0, function* () {
        const folder = new folder_1.Folder(data_1.name, data_1.keys, data_1.publicKey);
        expect(folder.name).toEqual(data_1.name);
        yield folder.encrypt();
        expect(folder.name).not.toEqual(data_1.name);
        yield folder.decrypt();
        expect(folder.name).toEqual(data_1.name);
    }));
});
describe("Asymetric de/-encryption with encrypted backup phrase and password", () => {
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield __1.Crypto.configure({
            password: user_1.password,
            encBackupPhrase: user_1.encryptedBackupPhrase
        });
    }));
    it("should decrypt folder class properties", () => __awaiter(void 0, void 0, void 0, function* () {
        const folder = new folder_1.Folder(data_1.encryptedName, data_1.keys);
        yield folder.decrypt();
        expect(folder.name).toEqual(data_1.name);
    }));
    it("should encrypt & decrypt folder class properties", () => __awaiter(void 0, void 0, void 0, function* () {
        const folder = new folder_1.Folder(data_1.name, data_1.keys, data_1.publicKey);
        expect(folder.name).toEqual(data_1.name);
        yield folder.encrypt();
        expect(folder.name).not.toEqual(data_1.name);
        yield folder.decrypt();
        expect(folder.name).toEqual(data_1.name);
    }));
});
//# sourceMappingURL=encrypt.test.js.map