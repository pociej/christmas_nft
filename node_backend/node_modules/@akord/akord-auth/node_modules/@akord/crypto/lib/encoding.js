"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.blobToArray = exports.dataUrlToArray = exports.arrayToDataUrl = exports.base64ToJson = exports.jsonToBase64 = exports.stringToArray = exports.arrayToString = exports.base64ToArray = exports.arrayToBase64 = void 0;
const base64_js_1 = require("base64-js");
/**
 * Decode base64 string from an array
 * @param {BufferSource} bufferSource
 * @returns {string}
 */
function arrayToBase64(bufferSource) {
    return (0, base64_js_1.fromByteArray)(new Uint8Array(bufferSource));
}
exports.arrayToBase64 = arrayToBase64;
/**
 * Encode base64 string into an array
 * @param {String} base64String
 * @returns {Uint8Array}
 */
function base64ToArray(base64String) {
    return (0, base64_js_1.toByteArray)(base64String);
}
exports.base64ToArray = base64ToArray;
/**
 * Decode string from an array
 * @param {BufferSource} bufferSource
 * @returns {string}
 */
function arrayToString(bufferSource) {
    const utf8Decoder = new TextDecoder();
    return utf8Decoder.decode(bufferSource);
}
exports.arrayToString = arrayToString;
/**
 * Encode string into an array
 * @param {String} string
 * @returns {Uint8Array}
 */
function stringToArray(string) {
    const utf8Encoder = new TextEncoder();
    return utf8Encoder.encode(string);
}
exports.stringToArray = stringToArray;
/**
 * Encode JSON object into base64 string
 * @param {Object} json
 * @returns {string}
 */
function jsonToBase64(json) {
    const jsonString = JSON.stringify(json);
    return (0, base64_js_1.fromByteArray)(stringToArray(jsonString));
}
exports.jsonToBase64 = jsonToBase64;
/**
 * Decode JSON object from base64 string
 * @param {string} b64string
 * @returns {Object}
 */
function base64ToJson(b64string) {
    const byteArray = (0, base64_js_1.toByteArray)(b64string);
    return JSON.parse(arrayToString(byteArray));
}
exports.base64ToJson = base64ToJson;
/**
 * Transform an array into data URL
 * @param {BufferSource} bufferSource
 * @returns {string}
 */
function arrayToDataUrl(bufferSource) {
    const blob = new Blob([bufferSource]);
    return URL.createObjectURL(blob);
}
exports.arrayToDataUrl = arrayToDataUrl;
/**
 * Transform data URL into an array
 * @param {string} dataUrl
 * @returns {Promise.<Uint8Array>}
 */
function dataUrlToArray(dataUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield fetch(dataUrl);
        const blob = yield res.blob();
        return blobToArray(blob);
    });
}
exports.dataUrlToArray = dataUrlToArray;
/**
 * Transform file blob into an array
 * @param {Blob} blob
 * @returns {Promise.<Uint8Array>}
 */
function blobToArray(blob) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileBuffer = yield new Response(blob).arrayBuffer();
        return new Uint8Array(fileBuffer);
    });
}
exports.blobToArray = blobToArray;
//# sourceMappingURL=encoding.js.map