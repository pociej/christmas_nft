import { AkordWallet } from "@akord/crypto";
import { CognitoUser, CognitoUserPool, CognitoUserSession } from "amazon-cognito-identity-js";
export declare class Auth {
    static authToken: string;
    static apiKey: string;
    static config: ApiConfig;
    static storage: Storage;
    static pool: CognitoUserPool;
    private static user;
    private static options;
    private constructor();
    static configure(options?: AuthOptions): void;
    /**
    * @param  {string} email
    * @param  {string} password
    * @returns Promise with AuthSession containing Akord Wallet and jwt token
    */
    static signIn: (email: string, password: string) => Promise<AuthSession>;
    /**
    * @param  {string} wallet akord wallet instance
    * @returns  Promise with AuthSession containing Akord Wallet and jwt token
    */
    static signInWithWallet: (wallet: AkordWallet) => Promise<AuthSession>;
    /**
     * @param  {string} confirmationCode
     * @param  {string} password
     * @param  {MfaType} mfaType
     * @returns Promise with AuthSession containing Akord Wallet and jwt token
    */
    static confirmSignIn: (confirmationCode: string, password: string, mfaType: MfaType) => Promise<AuthSession>;
    /**
    * @returns Promise with AuthSession containing Akord Wallet and jwt token
    */
    static authenticate: () => Promise<AuthSession>;
    static signOut: () => Promise<void>;
    /**
    * @param  {string} email
    * @param  {string} password
    * @param  {SignUpOptions} options JSON client metadata, ex: { clientType: "CLI" }
    * @returns Promise with Akord Wallet
    */
    static signUp: (email: string, password: string, options?: SignUpOptions) => Promise<{
        wallet: AkordWallet;
    }>;
    /**
    * @param  {AkordWallet} wallet akord wallet instance
    * @param  {SignUpOptions} options JSON client metadata, ex: { clientType: "CLI" }
    * @returns Promise with Akord Wallet
    */
    static signUpWithWallet: (wallet?: AkordWallet, options?: SignUpOptions) => Promise<{
        wallet: AkordWallet;
    }>;
    static resendCode: (email: string, options?: ResendSignUpOptions) => Promise<Object>;
    /**
    * @param  {string} email
    * @param  {string} code
    * @returns
    */
    static verifyAccount: (email: string, code: string) => Promise<Object>;
    static changePassword: (currentPassword: string, newPassword: string) => Promise<AuthSession>;
    static changePasswordSubmit: (email: string, code: string, password: string) => Promise<void>;
    static forgotPassword: (email: string, verifyUrl?: string) => Promise<void>;
    static forgotPasswordSubmit: (email: string, code: string, backupPhrase: string, newPassword: string) => Promise<void>;
    /**
     * Gets jwt token if available. For SRP auth:
     * 1. Get idToken, accessToken, refreshToken, and clockDrift from storage
     * 2. Validate the tokens if active or expired.
     * 3. If tokens are valid, return current session.
     * 4. If tokens are expired, invoke the refreshToken().
     */
    static getAuthToken: () => Promise<string>;
    static getAuthorization: () => Promise<string>;
    static getUser: (bypassCache?: boolean) => Promise<UserData>;
    static getUserAttributes: () => Promise<any>;
    static updateUserAttribute: (attributeName: string, attributeValue: string) => Promise<any>;
    static enableMFA: (mfaType: MfaType) => Promise<void>;
    static disableMFA: () => Promise<void>;
    static registerPhoneNumber: (phoneNumber: string) => Promise<void>;
    static verifyPhoneNumber: (verificationCode: string) => Promise<void>;
    static associateSoftwareToken: () => Promise<string>;
    static verifySoftwareToken: (totpCode: string, deviceName: string) => Promise<void>;
    static generateAPIKey: () => Promise<string>;
    static getAPIKey: () => Promise<string>;
    static deleteAPIKey: () => Promise<void>;
    private static retrieveUserAttributes;
    static getCurrentSessionUser: () => Promise<{
        user: CognitoUser;
        session: CognitoUserSession;
    }>;
    private static authenticateUser;
    private static confirmUser;
    private static getCognitoUser;
    private static jsonToUserAttributes;
}
declare type AuthOptions = {
    env?: "dev" | "v2";
    storage?: Storage;
    authToken?: string;
    apiKey?: string;
};
export declare type ResendSignUpOptions = {
    clientType?: "WEB" | "CLI";
    verifyUrl?: string;
};
export declare type SignUpOptions = {
    clientType?: "WEB" | "CLI";
    verifyUrl?: string;
    referrerId?: string;
    wallet?: AkordWallet;
};
export declare type AuthSession = {
    wallet: AkordWallet;
    jwt: string;
};
export declare type UserData = {
    username: string;
    attributes: any;
    mfaType?: MfaType;
};
export declare type MfaType = "BACKUP_PHRASE" | "SMS" | "TOTP";
interface ApiConfig {
    apiurl: string;
    userPoolId: string;
    userPoolsWebClientId: string;
}
export {};
