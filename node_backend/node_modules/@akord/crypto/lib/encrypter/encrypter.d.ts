import { Wallet } from '../wallet';
import { EncryptedPayload } from '../types';
import { EncryptedKeys, Keys } from './types';
declare class Encrypter {
    publicKey: Uint8Array;
    decryptedKeys: Keys[];
    wallet: Wallet;
    keys: EncryptedKeys[];
    constructor(wallet: Wallet, keys: EncryptedKeys[], publicKey: Uint8Array);
    setPublicKey(publicKey: string): void;
    setRawPublicKey(publicKey: Uint8Array): void;
    decryptObject(encryptedObject: any, fieldsToDecrypt: any[]): Promise<any>;
    encryptString(_string: string): Promise<string | EncryptedPayload>;
    decryptString(_encryptedString: string): Promise<string>;
    private decryptKeys;
    setKeys(keys: EncryptedKeys[]): void;
    encryptMemberKeys(memberKeys: any[]): Promise<EncryptedKeys[]>;
    encryptMemberKey(keyPair: Keys): Promise<EncryptedKeys>;
    decryptRaw(encryptedPayload: string | EncryptedPayload, decode?: boolean): Promise<ArrayBuffer>;
    encryptRaw(plaintext: Uint8Array, encode?: boolean, encryptedKey?: string): Promise<string | EncryptedPayload>;
}
export { Encrypter };
