"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const browser_level_1 = require("@akord/browser-level");
const memory_level_1 = require("memory-level");
class Keystore {
    constructor(db) {
        this.db = db;
    }
    /**
     * Opens Level DB Keystore<string, CryptoKey>
     * Falls back to in-memory Level if backing storage implementation (e.g. indexeddb) is missing
     * @returns Keystore instance
     */
    static instance() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._instance) {
                return this._instance;
            }
            try {
                return yield this.persitentInstance();
            }
            catch (e) {
                return yield this.inMemoryInstance();
            }
        });
    }
    static persitentInstance() {
        return __awaiter(this, void 0, void 0, function* () {
            const db = new browser_level_1.BrowserLevel(Keystore.KEYSTORE_LOCATION, Keystore.DEFAULT_ENCODING_OPTIONS);
            yield db.open();
            return (this._instance = new this(db));
        });
    }
    static inMemoryInstance() {
        return __awaiter(this, void 0, void 0, function* () {
            const db = new memory_level_1.MemoryLevel(Keystore.DEFAULT_INMEMORY_ENCODING_OPTIONS);
            yield db.open();
            return (this._instance = new this(db));
        });
    }
    store(keyName, key) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.db.put(keyName, key, Keystore.DEFAULT_ENCODING_OPTIONS);
        });
    }
    get(keyName) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.db.get(keyName, Keystore.DEFAULT_ENCODING_OPTIONS);
            }
            catch (err) {
                console.log(err);
            }
        });
    }
    delete(keyName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.db.del(keyName);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.db.close();
        });
    }
}
exports.default = Keystore;
Keystore.KEYSTORE_LOCATION = '.akord/keystore';
Keystore.DEFAULT_ENCODING_OPTIONS = {
    valueEncoding: {
        encode(data) { return data; },
        decode(data) { return data; },
        format: 'view'
    }
};
Keystore.DEFAULT_INMEMORY_ENCODING_OPTIONS = Object.assign(Object.assign({}, Keystore.DEFAULT_ENCODING_OPTIONS), { storeEncoding: 'view' });
//# sourceMappingURL=keystore.js.map