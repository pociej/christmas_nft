import "reflect-metadata";
import { EncryptedKeys } from "../encrypter/types";
export declare abstract class Encryptable {
    constructor(keys: Array<EncryptedKeys>, publicKey: string);
    __keys__: Array<EncryptedKeys>;
    __publicKey__: string;
    __encryptProps__: Set<string>;
    [key: string]: any;
    decrypt(): Promise<void>;
    encrypt(): Promise<void>;
}
/**
 *
 * De/-Encrypt class attribute(s).
 * @example
```
class Foo extends Encryptable {
    constructor(bar, _keys) {
        super(_keys)
        this.bar = bar
    }

    @encrypted()
    bar: string // attr will be de/-encrypted
}
const foo = new Foo("test")
await foo.encrypt()
await foo.decrypt()
```
 */
export declare function encrypted(): (target: any, propertyKey: string) => void;
