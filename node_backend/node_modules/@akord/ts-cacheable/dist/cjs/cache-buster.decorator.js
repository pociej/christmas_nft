"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwErrorIfResultIsNotObservable = exports.NO_OBSERVABLE_ERROR_MESSAGE = exports.CacheBuster = void 0;
const common_1 = require("./common");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
function CacheBuster(cacheBusterConfig) {
    return function (_target, _propertyKey, propertyDescriptor) {
        const decoratedMethod = propertyDescriptor.value;
        if (propertyDescriptor && propertyDescriptor.value) {
            /* use function instead of an arrow function to keep context of invocation */
            propertyDescriptor.value = function (...parameters) {
                if ((0, common_1.isInstant)(cacheBusterConfig)) {
                    (0, common_1.bustCache)(cacheBusterConfig);
                    return decoratedMethod.call(this, ...parameters);
                }
                const decoratedMethodResult = decoratedMethod.call(this, ...parameters);
                throwErrorIfResultIsNotObservable(decoratedMethodResult);
                return decoratedMethodResult.pipe((0, operators_1.tap)(() => {
                    (0, common_1.bustCache)(cacheBusterConfig);
                }));
            };
        }
        ;
        return propertyDescriptor;
    };
}
exports.CacheBuster = CacheBuster;
;
exports.NO_OBSERVABLE_ERROR_MESSAGE = `
  Method decorated with @CacheBuster should return observable. 
  If you don't want to change the method signature, set isInstant flag to true.
`;
function throwErrorIfResultIsNotObservable(decoratedMethodResult) {
    if (decoratedMethodResult instanceof rxjs_1.Observable === false) {
        throw new Error(exports.NO_OBSERVABLE_ERROR_MESSAGE);
    }
}
exports.throwErrorIfResultIsNotObservable = throwErrorIfResultIsNotObservable;
//# sourceMappingURL=cache-buster.decorator.js.map