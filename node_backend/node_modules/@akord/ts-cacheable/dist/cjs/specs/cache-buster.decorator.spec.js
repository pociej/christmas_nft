"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const cache_buster_decorator_1 = require("../cache-buster.decorator");
const operators_1 = require("rxjs/operators");
const testing_1 = require("rxjs/testing");
describe('CacheBusterDecorator', () => {
    const cacheBusterNotifier = new rxjs_1.Subject();
    let service;
    let testScheduler;
    class TestService {
        sumWithObservableNonInstant(a, b) {
            return (0, rxjs_1.of)(this.sumValues(a, b)).pipe((0, operators_1.delay)(1000));
        }
        // @ts-expect-error
        throwWithNonObservableNonInstant() {
            /*
            Method decorated with @CacheBuster should return observable.
            If you don't want to change the method signature, set isInstant flag to true.
            */
        }
        sumWithInstant(a, b) {
            return this.sumValues(a, b);
        }
        sumValues(a, b) {
            return a + b;
        }
    }
    __decorate([
        (0, cache_buster_decorator_1.CacheBuster)({
            cacheBusterNotifier: cacheBusterNotifier
        })
    ], TestService.prototype, "sumWithObservableNonInstant", null);
    __decorate([
        (0, cache_buster_decorator_1.CacheBuster)({
            cacheBusterNotifier: cacheBusterNotifier
        })
    ], TestService.prototype, "throwWithNonObservableNonInstant", null);
    __decorate([
        (0, cache_buster_decorator_1.CacheBuster)({
            cacheBusterNotifier: cacheBusterNotifier,
            isInstant: true
        })
    ], TestService.prototype, "sumWithInstant", null);
    beforeEach(() => {
        service = new TestService();
        testScheduler = new testing_1.TestScheduler((actual, expected) => {
            expect(actual).toEqual(expected);
        });
    });
    it('should create', () => {
        expect(service).toBeTruthy();
    });
    it('should call original method body and return result [isInstant: undefined]', (done) => {
        service.sumWithObservableNonInstant(1, 2).subscribe(res => {
            expect(res).toEqual(3);
            done();
        });
    });
    it('should call original method body and return result [isInstant: true]', () => {
        const res = service.sumWithInstant(1, 2);
        expect(res).toEqual(3);
    });
    it('it should throw error if [isInstant: undefined] is decorating method that does not return Observable', () => {
        expect(() => service.throwWithNonObservableNonInstant()).toThrowError(cache_buster_decorator_1.NO_OBSERVABLE_ERROR_MESSAGE);
    });
    it('should bust the cache before original method has been executed', () => {
        const methodBodySpy = spyOn(service, 'sumValues').and.callThrough();
        const notifierSpy = spyOn(cacheBusterNotifier, 'next').and.callThrough();
        service.sumWithInstant(1, 3);
        expect(methodBodySpy).toHaveBeenCalledTimes(1);
        expect(notifierSpy).toHaveBeenCalledTimes(1);
        expect(notifierSpy).toHaveBeenCalledBefore(methodBodySpy);
    });
    it('should bust the cache after original has been executed (observable emitted)', (done) => {
        const methodBodySpy = spyOn(service, 'sumValues').and.callThrough();
        const notifierSpy = spyOn(cacheBusterNotifier, 'next').and.callThrough();
        service.sumWithObservableNonInstant(1, 3).subscribe(res => {
            expect(methodBodySpy).toHaveBeenCalledTimes(1);
            expect(notifierSpy).toHaveBeenCalledTimes(1);
            expect(methodBodySpy).toHaveBeenCalledBefore(notifierSpy);
            done();
        });
    });
    it('should wait until observable from decorated method emits and then bust the cache', () => {
        testScheduler.run(({ expectObservable }) => {
            const source$ = service.sumWithObservableNonInstant(1, 2);
            const notifier$ = cacheBusterNotifier;
            expectObservable(source$).toBe('1000ms (a|)', { a: 3 });
            expectObservable(notifier$).toBe('1000ms a', { a: undefined });
        });
    });
});
//# sourceMappingURL=cache-buster.decorator.spec.js.map